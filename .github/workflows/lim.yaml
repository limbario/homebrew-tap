name: Publish lim
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to pull from limbar repo and publish."
        required: true
        type: string

env:
  GO_VERSION: 1.22.2
  PLATFORMS: linux/amd64,linux/arm64,darwin/amd64,darwin/arm64,windows/amd64

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      SHA256_lim_linux_amd64: ${{ steps.build.outputs.SHA256_lim_linux_amd64 }}
      SHA256_lim_linux_arm64: ${{ steps.build.outputs.SHA256_lim_linux_arm64 }}
      SHA256_lim_darwin_amd64: ${{ steps.build.outputs.SHA256_lim_darwin_amd64 }}
      SHA256_lim_darwin_arm64: ${{ steps.build.outputs.SHA256_lim_darwin_arm64 }}
      SHA256_lim_windows_amd64: ${{ steps.build.outputs.SHA256_lim_windows_amd64 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: limbario/limbar
          ref: ${{ inputs.version }}
          token: ${{ secrets.KARLIMBAR_BOT_TOKEN }}

      - name: Fetch history for all tags
        run: git fetch --prune --unshallow
      - name: Calculate version
        id: version
        run: |
          VERSION="v0.0.0"
          if [ -z "$(git tag)" ]; then
            echo "No tags found"
            VERSION="$(echo "v0.0.0-$(git rev-list HEAD --count)-$(git describe --dirty --always)" | sed 's/-/./2' | sed 's/-/./2' | sed 's/-/./2')"
          else
            echo "Tags found:\n$(git tag)"
            VERSION="$(git describe --dirty --always --tags --match 'v*' | sed 's|.*/||' | sed 's/-/./2' | sed 's/-/./2' | sed 's/-/./2')"
          fi
          echo "Version is ${VERSION}"
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false
      - name: Find the Go Environment
        id: go
        run: |
          echo "cache=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT

      - name: Cache Go Dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.go.outputs.mod }}
          key: mod-cache-${{ hashFiles('**/go.sum') }}
          restore-keys: mod-cache-

      - name: Cache Go Build Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.go.outputs.cache }}
          key: build-cache-lim-${{ hashFiles('**/go.sum') }}
          restore-keys: build-cache-lim-

      - name: Download Dependencies
        run: go mod download -x

      # Download community version. setup-atlas downloads the non-OSS one.
      - name: Check if code-gen changes anything
        run: |-
          #!/usr/bin/env bash
          set -e

          wget \
            --quiet \
            --output-document /usr/local/bin/atlas \
            "https://release.ariga.io/atlas/atlas-linux-$(arch | sed 's/x86_64/amd64/g')-v0.25.0"
          chmod +x /usr/local/bin/atlas

          go generate ./...
          git diff --exit-code && echo "generated code is up to date" || (echo "go generate resulted in changes" && git diff && exit 1)

      - name: Build
        id: build
        run: |
          for platform in $(echo $PLATFORMS | tr "," "\n"); do
            os=$(echo $platform | cut -d'/' -f1)
            arch=$(echo $platform | cut -d'/' -f2)
            echo "Building for $os/$arch"
            extension=""
            if [ "$os" = "windows" ]; then
              extension=".exe"
              if [ "$arch" = "arm64" ]; then
                continue
              fi
            fi
            CGO_ENABLED=0 GOOS=${os} GOARCH=${arch} go build -ldflags="-X 'github.com/limbario/limbar/version.Version=${{ steps.version.outputs.VERSION }}'" -o .work/bin/lim-${os}-${arch}${extension} cmd/lim/main.go &
          done
          for platform in $(echo $PLATFORMS | tr "," "\n"); do
            # Wait for every background job to finish. If any fails, -n will make the wait command fail
            # but it waits only for the last job so we need to invoke it as many times as there are jobs.
            wait -n
          done
          for platform in $(echo $PLATFORMS | tr "," "\n"); do
            os=$(echo $platform | cut -d'/' -f1)
            arch=$(echo $platform | cut -d'/' -f2)
            SHA256=$(shasum -a 256 .work/bin/lim-${os}-${arch} | cut -d ' ' -f 1)
            echo "SHA256_lim_${os}_${arch}=${SHA256}"
            echo "SHA256_lim_${os}_${arch}=${SHA256}" >> "$GITHUB_OUTPUT"
          done
      - name: Prepare Windows bundle
        env:
          SCRCPY_VERSION: v2.6.1
        run: |
          #!/usr/bin/env bash
          set -e

          mkdir .work/lim-windows-amd64
          curl -Lo /tmp/scrcpy.zip https://github.com/Genymobile/scrcpy/releases/download/${SCRCPY_VERSION}/scrcpy-win64-${SCRCPY_VERSION}.zip
          unzip /tmp/scrcpy.zip -d .work/lim-windows-amd64
          mv .work/lim-windows-amd64/scrcpy-win64-${SCRCPY_VERSION}/* .work/lim-windows-amd64
          rmdir .work/lim-windows-amd64/scrcpy-win64-${SCRCPY_VERSION}
          mv .work/bin/lim-windows-amd64.exe .work/lim-windows-amd64/lim.exe
          zip -r .work/bin/lim-windows-amd64.zip .work/lim-windows-amd64
      - name: Create release
        env:
          GH_TOKEN: ${{ secrets.KARLIMBAR_BOT_TOKEN }}
        run: |
          gh release create ${{ steps.version.outputs.VERSION }} \
            --title ${{ steps.version.outputs.VERSION }} \
            --notes 'Install with `brew install limbario/lim/lim` right away!' \
            --repo limbario/homebrew-lim ./.work/bin/lim-*
  open-pr:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Update version in formula
        run: |
          sed -i 's/version ".*"/version "${{ needs.build.outputs.version }}"/g' Formula/lim.rb
          sed -i '/# replace_with_darwin_arm64_sha256/ s/sha256 "[^"]*"/sha256 "'${{ needs.build.outputs.SHA256_lim_darwin_arm64 }}'"/' Formula/lim.rb
          sed -i '/# replace_with_darwin_amd64_sha256/ s/sha256 "[^"]*"/sha256 "'${{ needs.build.outputs.SHA256_lim_darwin_amd64 }}'"/' Formula/lim.rb
          sed -i '/# replace_with_linux_arm64_sha256/ s/sha256 "[^"]*"/sha256 "'${{ needs.build.outputs.SHA256_lim_linux_arm64 }}'"/' Formula/lim.rb
          sed -i '/# replace_with_linux_amd64_sha256/ s/sha256 "[^"]*"/sha256 "'${{ needs.build.outputs.SHA256_lim_linux_amd64 }}'"/' Formula/lim.rb
      - name: Open a pull request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.KARLIMBAR_BOT_TOKEN }}
          commit-message: |-
            Update to ${{ inputs.version }}
          title: Update to ${{ inputs.version }}
          body: |-
            Update to ${{ inputs.version }}
          branch: update-to-${{ inputs.version }}
          base: main
